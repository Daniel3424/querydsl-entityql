{% import "macros.twig" as macros %}
package {{ package }};

import com.querydsl.core.types.dsl.*;
import com.querydsl.sql.*;
import pl.exsio.querydsl.entityql.*;
import pl.exsio.querydsl.entityql.ex.*;
import pl.exsio.querydsl.entityql.path.*;
import pl.exsio.querydsl.entityql.type.*;
import com.querydsl.core.types.Path;
import com.querydsl.core.dml.StoreClause;
import java.util.ArrayList;
import java.util.List;

{% if(isGroovy) %}
@groovy.transform.CompileStatic
{% endif %}
public final class {{ className }} extends QBase<{{entityName}}> {

    public static final {{ className }} INSTANCE = new {{ className }}();

    {% for name, path in q.columns %}
        public final {{macros.printColumnType(path)}} {{ name }};
    {% endfor %}

    {% for name, fk in q.joinColumns %}
        public final {{macros.printJoinColumnType(fk)}} {{ name }};
    {% endfor %}

    public final PrimaryKey<{{entityName}}> _primaryKey;

    public {{ className }}() {
       this("{{ q.tableName }}");
    }

    @SuppressWarnings(value = "unchecked")
    public {{ className }}(String variable) {
        super({{entityName}}.class, variable, "{{q.schemaName }}", "{{ q.tableName }}");

        {% for name, path in q.columns %}
        {{name}}: {
            this.{{name}} = (({{macros.printColumnType(path)}}) QPathFactory.create(this, new QPathConfig({{macros.printOriginalType(path)}},{{path.config.fieldType.name}}.class,"{{path.config.name}}",{{path.config.nullable}},{{path.config.idx}},{{path.config.sqlType}})).get());
            addMetadata(this.{{name}}, QColumnMetadataFactory.create("{{path.config.name}}",{{path.config.idx}},{{path.config.sqlType}},{{path.config.nullable}}));
        }
        {% endfor %}

        {% for name, fk in q.joinColumns %}
            {% if (fk.getPaths().size() > 1) %}
                {{name}}: {
                    List paths = new ArrayList();
                    List<String> foreignColumnNames = new ArrayList<>();
                    {% for fkPath in fk.getPaths().keySet() %}
                        Path<?> {{name}}{{loop.index0}}  = QPathFactory.create(this, new QPathConfig({{macros.printOriginalType(fkPath)}},{{fkPath.config.fieldType.name}}.class,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}})).get();
                        addMetadata({{name}}{{loop.index0}}, QColumnMetadataFactory.create("{{fkPath.config.name}}",{{fkPath.config.idx}},{{fkPath.config.sqlType}},{{fkPath.config.nullable}}));
                        paths.add({{name}}{{loop.index0}});
                    {% endfor %}
                    {% for fcName in fk.foreignColumnNames %}
                        foreignColumnNames.add("{{fcName}}");
                    {% endfor %}
                    this.{{name}} = this.<{{fk.parametrizedType.name}}>createForeignKey(paths, foreignColumnNames);
                }
            {% else %}
                {{name}}: {
                    this.{{name}} = this.<{{fk.parametrizedType.name}}>createForeignKey(this.{{name}}Id, "{{fk.foreignColumnNames.first()}}");
                }
            {% endif %}
        {% endfor %}

        _primaryKey: {
             List<Path> paths = new ArrayList();
             {% for id in q.idColumns %}
                         paths.add(this.{{id.field.name}});
             {% endfor %}
             this._primaryKey = createPrimaryKey(paths.<Path>toArray(new Path[0]));
        }
    }

    @SuppressWarnings(value = "unchecked")
    public <C extends StoreClause<C>> StoreClause<C> set(StoreClause<C> clause, Object... params) {
        if (params.length % 2 != 0) {
            throw new InvalidArgumentException("Odd number of parameters");
        }
        for (int i = 0; i < params.length - 1; i += 2) {
            Object key = params[i];
            Object value = params[i + 1];
            if (!(key instanceof Path)) {
                throw new InvalidArgumentException("Param key has to be Path");
            }
            clause.set((Path<Object>) key, value);
        }
        return clause;
    }

    public Q<{{entityName}}> dynamic() {
        return EntityQL.qEntity({{entityName}}.class);
    }

    public Q<{{entityName}}> dynamic(String variable) {
            return EntityQL.qEntity({{entityName}}.class, variable);
    }
}
