{% import "macros.twig" as macros %}
package {{ package }};

import com.querydsl.core.types.dsl.*;
import com.querydsl.sql.*;
import pl.exsio.querydsl.entityql.*;
import pl.exsio.querydsl.entityql.ex.*;
import pl.exsio.querydsl.entityql.path.*;
import com.querydsl.core.types.Path;
import com.querydsl.core.dml.StoreClause;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * This class was generated by EntityQL (https://github.com/eXsio/querydsl-entityql).
 * It is not recommended to make any changes to this class.
 * Any manual changes will be lost upon the next class generation.
 *
 */
{% if(isGroovy) %}
@groovy.transform.CompileStatic
{% endif %}
public final class {{ className }} extends QStaticModel<{{entityName}}> {

    public static final {{ className }} INSTANCE = new {{ className }}();

    {% for name, path in q.columns %}
        public final {{macros.printColumnType(path)}} {{ name }};
    {% endfor %}

    {% for name, fk in q.joinColumns %}
        public final {{macros.printJoinColumnType(fk)}} {{ name }};
    {% endfor %}

    public final PrimaryKey<{{entityName}}> _primaryKey;

    public {{ className }}() {
       this("{{ q.tableName }}");
    }

    @SuppressWarnings(value = "unchecked")
    public {{ className }}(String variable) {
        super({{entityName}}.class, variable, "{{q.schemaName }}", "{{ q.tableName }}");

        {% for name, path in q.columns %}
        {{name}}: {
            QPathConfig config = new QPathConfig({{macros.printOriginalType(path)}},{{path.config.computedFieldType.name}}.class,"{{path.config.name}}",{{path.config.nullable}},{{path.config.idx}},{{path.config.sqlType}});
            this.{{name}} = QPathFactory.<{{macros.printColumnType(path)}}>create(this, config);
            addMetadata(this.{{name}}, QColumnMetadataFactory.create(config));
        }
        {% endfor %}

        {% for name, fk in q.joinColumns %}
            {% if (fk.getPaths().size() > 1) %}
                {{name}}: {
                    List paths = new ArrayList();
                    List<String> foreignColumnNames = new ArrayList<>();
                    {% for fkPath in fk.getPaths().keySet() %}
                        QPathConfig config{{loop.index0}} = new QPathConfig({{macros.printOriginalType(fkPath)}},{{fkPath.config.computedFieldType.name}}.class,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}});
                        Path<?> {{name}}{{loop.index0}}  = QPathFactory.<Path>create(this, config{{loop.index0}});
                        addMetadata({{name}}{{loop.index0}}, QColumnMetadataFactory.create(config{{loop.index0}}));
                        paths.add({{name}}{{loop.index0}});
                    {% endfor %}
                    {% for fcName in fk.foreignColumnNames %}
                        foreignColumnNames.add("{{fcName}}");
                    {% endfor %}
                    this.{{name}} = this.<{{fk.parametrizedType.name}}>createForeignKey(paths, foreignColumnNames);
                }
            {% else %}
                {{name}}: {
                    this.{{name}} = this.<{{fk.parametrizedType.name}}>createForeignKey(this.{{name}}Id, "{{fk.foreignColumnNames.first()}}");
                }
            {% endif %}
        {% endfor %}

        _primaryKey: {
             List<Path> paths = new ArrayList();
             {% for id in q.idColumns %}
                 paths.add(this.{{id.fieldName}});
             {% endfor %}
             this._primaryKey = this.<{{entityName}}>createPrimaryKey(paths.<Path>toArray(new Path[0]));
        }
    }
}
