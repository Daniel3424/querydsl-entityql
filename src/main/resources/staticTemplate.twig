{% import "macros.twig" as macros %}
package {{ package }};

import com.querydsl.core.types.Path;
import com.querydsl.sql.PrimaryKey;
import pl.exsio.querydsl.entityql.QColumnMetadataFactory;
import pl.exsio.querydsl.entityql.QPathConfig;
import pl.exsio.querydsl.entityql.QPathFactory;
import pl.exsio.querydsl.entityql.QStaticModel;
{% if(q.rawJoinColumns.size() > 0 or q.rawInverseJoinColumns.size() > 0) %}
    import com.querydsl.sql.ForeignKey;
{% endif %}
import com.querydsl.core.types.Path;
import com.querydsl.core.dml.StoreClause;

import {{entityName}};
{% for name, path in q.rawColumns %}
    {% if (path.parametrized) %}
        import {{replace(path.parametrizedType.name, { '$': '.' })}};
    {% endif %}
    import {{ path.get().class.name }};
    import {{path.config.computedFieldType.name}};
{% endfor %}
{% for name, fk in q.rawJoinColumns %}
        import {{replace(fk.parametrizedType.name, { '$': '.' })}};
        {% for fkPath in fk.getPaths().keySet() %}
            import {{fkPath.config.computedFieldType.name}};
        {% endfor %}
{% endfor %}
{% for name, fk in q.rawInverseJoinColumns %}
        import {{replace(fk.parametrizedType.name, { '$': '.' })}};
        {% for fkPath in fk.getPaths().keySet() %}
            import {{fkPath.config.computedFieldType.name}};
        {% endfor %}
{% endfor %}
{% if(isGroovy) %}
import groovy.transform.CompileStatic;
{% else %}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
{% endif %}

/**
 *
 * This class was generated by EntityQL (https://github.com/eXsio/querydsl-entityql).
 * It is not recommended to make any changes to this class.
 * Any manual changes will be lost upon the next class generation.
 *
 */
{% if(isGroovy) %}
@CompileStatic
{% endif %}
public final class {{ className }} extends QStaticModel<{{entitySimpleName}}> {

    public static final {{ className }} INSTANCE = new {{ className }}();

    {% for name, path in q.rawColumns %}
        public final {{macros.printColumnType(path)}} {{ name }};
    {% endfor %}

    {% for name, fk in q.rawJoinColumns %}
        public final {{macros.printJoinColumnType(fk)}} {{ name }};
    {% endfor %}

    {% for name, fk in q.rawInverseJoinColumns %}
            public final {{macros.printJoinColumnType(fk)}} {{ name }};
        {% endfor %}

    public final PrimaryKey<{{entitySimpleName}}> _primaryKey;

    public {{ className }}() {
       this("{{ q.tableName }}");
    }

    @SuppressWarnings(value = "unchecked")
    public {{ className }}(String variable) {
        super({{entitySimpleName}}.class, variable, "{{q.schemaName }}", "{{ q.tableName }}");

        {% for name, path in q.rawColumns %}
        {{name}}: {
            QPathConfig config = new QPathConfig({{macros.printOriginalType(path)}},{{path.config.computedFieldType.simpleName}}.class,"{{path.config.name}}",{{path.config.nullable}},{{path.config.idx}},{{path.config.sqlType}});
            this.{{name}} = QPathFactory.<{{macros.printColumnType(path)}}>create(this, config);
            addMetadata(this.{{name}}, QColumnMetadataFactory.create(config));
            this.columnsMap.put("{{name}}",this.{{name}});
        }
        {% endfor %}

        {% for name, fk in q.rawJoinColumns %}
            {% if (fk.getPaths().size() > 1) %}
                {{name}}: {

                    {% for fkPath in fk.getPaths().keySet() %}
                        QPathConfig config{{loop.index0}} = new QPathConfig({{macros.printOriginalType(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}.class,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}});
                        Path<?> {{name}}{{loop.index0}}  = QPathFactory.<Path>create(this, config{{loop.index0}});
                        addMetadata({{name}}{{loop.index0}}, QColumnMetadataFactory.create(config{{loop.index0}}));
                    {% endfor %}
                    this.{{name}} = this.<{{fk.parametrizedType.simpleName}}>createForeignKey(Arrays.<Path<?>>asList(
                    {% for fkPath in fk.getPaths().keySet() %}
                        {{name}}{{loop.index0}}
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ), Arrays.asList(
                     {% for fcName in fk.foreignColumnNames %}
                        "{{fcName}}"
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ));
                    this.joinColumnsMap.put("{{name}}",this.{{name}});
                }
            {% else %}
                {{name}}: {
                    this.{{name}} = this.<{{fk.parametrizedType.simpleName}}>createForeignKey(this.{{name}}Id, "{{fk.foreignColumnNames.first()}}");
                    this.joinColumnsMap.put("{{name}}",this.{{name}});
                }
            {% endif %}
        {% endfor %}

        {% for name, fk in q.rawInverseJoinColumns %}
            {{name}}: {

                {% for fkPath in fk.getPaths().keySet() %}
                    QPathConfig config{{loop.index0}} = new QPathConfig({{macros.printOriginalType(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}.class,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}});
                    Path<?> {{name}}{{loop.index0}}  = QPathFactory.<Path>create(this, config{{loop.index0}});
                    addMetadata({{name}}{{loop.index0}}, QColumnMetadataFactory.create(config{{loop.index0}}));
                {% endfor %}
                this.{{name}} = this.<{{fk.parametrizedType.simpleName}}>createInvForeignKey(Arrays.<Path<?>>asList(
                {% for fkPath in fk.getPaths().keySet() %}
                    {{name}}{{loop.index0}}
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ), Arrays.asList(
                 {% for fcName in fk.foreignColumnNames %}
                    "{{fcName}}"
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ));
                this.inverseJoinColumnsMap.put("{{name}}",this.{{name}});
            }
        {% endfor %}

        _primaryKey: {
             this.primaryKeyColumns = Arrays.<Path<?>>asList(
             {% for id in q.idColumns %}
                  this.{{id.fieldName}}
                   {% if (loop.last) %}{% else %}
                      ,
                  {% endif %}
             {% endfor %}
             );
             this._primaryKey = this.<{{entitySimpleName}}>createPrimaryKey(primaryKeyColumns.<Path>toArray(new Path[0]));

        }
    }
}
