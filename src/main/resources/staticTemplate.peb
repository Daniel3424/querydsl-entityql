{% import 'macros.peb' as macros %}
package {{ package }};~nl~~nl~

import com.querydsl.core.types.Path;~nl~
import com.querydsl.sql.PrimaryKey;~nl~
import pl.exsio.querydsl.entityql.QColumnMetadataFactory;~nl~
import pl.exsio.querydsl.entityql.QPathConfig;~nl~
import pl.exsio.querydsl.entityql.QPathFactory;~nl~
import pl.exsio.querydsl.entityql.QStaticModel;~nl~
{% if(q.rawJoinColumns.size() > 0 or q.rawInverseJoinColumns.size() > 0) %}
    import com.querydsl.sql.ForeignKey;~nl~
{% endif %}
import {{entityName}};~nl~
{% for entry in q.rawColumns %}
    {% set name = entry.key %}
    {% set path = entry.value %}
    {% if (path.parametrized and isValidImport(path.parametrizedType, imports)) %}
        import {{replace(path.parametrizedType.name, '$', '.')}};~nl~
    {% endif %}
    {% if (isValidImport(path.get().class, imports)) %}
        import {{ path.get().class.name }};~nl~
    {% endif %}
    {% if (isValidImport(path.config.computedFieldType, imports)) %}
        import {{path.config.computedFieldType.name}};~nl~
    {% endif %}
{% endfor %}
{% for entry in q.rawJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        {% if (isValidImport(fk.parametrizedType, imports)) %}
            import {{replace(fk.parametrizedType.name, '$', '.' )}};~nl~
        {% endif %}
        {% for fkPath in fk.getPaths().keySet() %}
            {% if (isValidImport(fkPath.config.computedFieldType, imports)) %}
                import {{fkPath.config.computedFieldType.name}};~nl~
            {% endif %}
        {% endfor %}
{% endfor %}
{% for entry in q.rawInverseJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        {% if (isValidImport(fk.parametrizedType, imports)) %}
            import {{replace(fk.parametrizedType.name, '$', '.')}};~nl~
        {% endif %}
        {% for fkPath in fk.getPaths().keySet() %}
            {% if (isValidImport(fkPath.config.computedFieldType, imports)) %}
                import {{fkPath.config.computedFieldType.name}};~nl~
            {% endif %}
        {% endfor %}
{% endfor %}
import javax.annotation.Generated;~nl~
import java.util.Arrays;~nl~
{% if(isGroovy) %}
import groovy.transform.CompileStatic;~nl~
{% endif %}
~nl~
/**~nl~
 *~nl~
 * This class was generated by EntityQL (https://github.com/eXsio/querydsl-entityql).~nl~
 * It is not recommended to make any changes to this class.~nl~
 * Any manual changes will be lost upon the next class generation.~nl~
 *~nl~
 */~nl~
 {% if(isGroovy) %}
@CompileStatic~nl~
{% endif %}
@Generated("{{exporterName}}")~nl~
public final class {{ className }} extends QStaticModel<{{entitySimpleName}}> {~nl~~nl~

~~~~private static final long serialVersionUID = {{uid}};~nl~~nl~

~~~~public static final {{ className }} INSTANCE = new {{ className }}();~nl~~nl~

~~~~public static final {{ className }} q{{entitySimpleName}} = INSTANCE;~nl~~nl~

    {% for entry in q.rawColumns %}
        {% set name = entry.key %}
        {% set path = entry.value %}
~~~~public final {{macros.printColumnType(path)}} {{ name }};~nl~~nl~
    {% endfor %}

    {% for entry in q.rawJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
~~~~public final {{macros.printJoinColumnType(fk)}} {{ name }};~nl~~nl~
    {% endfor %}

    {% for entry in q.rawInverseJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
~~~~public final {{macros.printJoinColumnType(fk)}} {{ name }};~nl~~nl~
    {% endfor %}

~~~~public final PrimaryKey<{{entitySimpleName}}> _primaryKey;~nl~~nl~

~~~~public {{ className }}() {~nl~
~~~~~~~~this("{{ q.tableName }}");~nl~
~~~~}~nl~

~~~~@SuppressWarnings(value = "unchecked")~nl~
~~~~public {{ className }}(String variable) {~nl~
~~~~~~~~super({{entitySimpleName}}.class, variable, "{{q.schemaName }}", "{{ q.tableName }}");~nl~

        {% for entry in q.rawColumns %}
            {% set name = entry.key %}
            {% set path = entry.value %}
~~~~~~~~{{name}}: {~nl~
~~~~~~~~~~~~QPathConfig config = new QPathConfig({{macros.printOriginalType(path)}},{{path.config.computedFieldType.simpleName}}.class,"{{path.config.name}}",{{path.config.nullable}},{{path.config.idx}},{{path.config.sqlType}});~nl~
~~~~~~~~~~~~this.{{name}} = QPathFactory.<{{macros.printColumnType(path)}}>create(this, config);~nl~
~~~~~~~~~~~~addMetadata(this.{{name}}, QColumnMetadataFactory.create(config));~nl~
~~~~~~~~~~~~this.columnsMap.put("{{name}}",this.{{name}});~nl~
~~~~~~~~}~nl~~nl~
        {% endfor %}

        {% for entry in q.rawJoinColumns %}
            {% set name = entry.key %}
            {% set fk = entry.value %}
            {% if (fk.getPaths().size() > 1) %}
~~~~~~~~{{name}}: {~nl~

                    {% for fkPath in fk.getPaths().keySet() %}
~~~~~~~~~~~~QPathConfig config{{loop.index}} = new QPathConfig({{macros.printOriginalType(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}.class,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}});~nl~
~~~~~~~~~~~~Path<?> {{name}}{{loop.index}}  = QPathFactory.<Path>create(this, config{{loop.index}});~nl~
~~~~~~~~~~~~addMetadata({{name}}{{loop.index}}, QColumnMetadataFactory.create(config{{loop.index}}));~nl~
                    {% endfor %}
~~~~~~~~~~~~this.{{name}} = this.<{{fk.parametrizedType.simpleName}}>createForeignKey(Arrays.<Path<?>>asList(
                    {% for fkPath in fk.getPaths().keySet() %}
                        {{name}}{{loop.index}}
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ), Arrays.asList(
                     {% for fcName in fk.foreignColumnNames %}
                        "{{fcName}}"
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ));~nl~
~~~~~~~~~~~~this.joinColumnsMap.put("{{name}}",this.{{name}});~nl~
~~~~~~~~}~nl~~nl~
            {% else %}
~~~~~~~~{{name}}: {~nl~
~~~~~~~~~~~~this.{{name}} = this.<{{fk.parametrizedType.simpleName}}>createForeignKey(this.{{name}}Id, "{{fk.foreignColumnNames.first()}}");~nl~
~~~~~~~~~~~~this.joinColumnsMap.put("{{name}}",this.{{name}});~nl~
~~~~~~~~}~nl~~nl~
            {% endif %}
        {% endfor %}

        {% for entry in q.rawInverseJoinColumns %}
            {% set name = entry.key %}
            {% set fk = entry.value %}
~~~~~~~~{{name}}: {~nl~

                {% for fkPath in fk.getPaths().keySet() %}
~~~~~~~~~~~~QPathConfig config{{loop.index}} = new QPathConfig({{macros.printOriginalType(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}.class,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}});~nl~
~~~~~~~~~~~~Path<?> {{name}}{{loop.index}}  = QPathFactory.<Path>create(this, config{{loop.index}});~nl~
~~~~~~~~~~~~addMetadata({{name}}{{loop.index}}, QColumnMetadataFactory.create(config{{loop.index}}));~nl~
                {% endfor %}
~~~~~~~~~~~~this.{{name}} = this.<{{fk.parametrizedType.simpleName}}>createInvForeignKey(Arrays.<Path<?>>asList(
                {% for fkPath in fk.getPaths().keySet() %}
                    {{name}}{{loop.index}}
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ), Arrays.asList(
                 {% for fcName in fk.foreignColumnNames %}
                    "{{fcName}}"
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ));~nl~
~~~~~~~~~~~~this.inverseJoinColumnsMap.put("{{name}}",this.{{name}});~nl~
~~~~~~~~}~nl~~nl~
        {% endfor %}

~~~~~~~~_primaryKey: {~nl~
~~~~~~~~~~~~this.primaryKeyColumns = Arrays.<Path<?>>asList(
             {% for idc in idCols %}
                  this.{{idc.fieldName}}
                  {% if not(loop.last) %},{% endif %}
             {% endfor %}
             );~nl~
~~~~~~~~~~~~Path[] pkArray = (Path[]) primaryKeyColumns.<Path>toArray(new Path[0]);~nl~
~~~~~~~~~~~~this._primaryKey = this.<{{entitySimpleName}}>createPrimaryKey(pkArray);~nl~
~~~~~~~~}~nl~~nl~
~~~~}~nl~
}
