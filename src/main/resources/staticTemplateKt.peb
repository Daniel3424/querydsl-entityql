{% import 'macrosKt.peb' as macros %}package {{ package }}

import com.querydsl.core.types.Path
import com.querydsl.sql.PrimaryKey
import pl.exsio.querydsl.entityql.QColumnMetadataFactory
import pl.exsio.querydsl.entityql.QPathConfig
import pl.exsio.querydsl.entityql.QPathFactory
import pl.exsio.querydsl.entityql.QStaticModel
{% if(q.rawJoinColumns.size() > 0 or q.rawInverseJoinColumns.size() > 0) %}
    import com.querydsl.sql.ForeignKey
{% endif %}
import com.querydsl.core.types.Path
import com.querydsl.core.dml.StoreClause

import {{entityName}}
{% for entry in q.rawColumns %}
    {% set name = entry.key %}
    {% set path = entry.value %}
    {% if (path.parametrized and isNotJavaLang(path.parametrizedType)) %}
        import {{replace(path.parametrizedType.name, '$', '.')}}
    {% endif %}
     {% if (isNotJavaLang(path.get().class)) %}
        import {{ path.get().class.name }}
     {% endif %}
     {% if (isNotJavaLang(path.config.computedFieldType)) %}
        import {{path.config.computedFieldType.name}}
    {% endif %}
{% endfor %}
{% for entry in q.rawJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        {% if (isNotJavaLang(fk.parametrizedType)) %}
            import {{replace(fk.parametrizedType.name, '$', '.' )}}
        {% endif %}
        {% for fkPath in fk.getPaths().keySet() %}
            {% if (isNotJavaLang(fkPath.config.computedFieldType)) %}
                import {{fkPath.config.computedFieldType.name}}
            {% endif %}
        {% endfor %}
{% endfor %}
{% for entry in q.rawInverseJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        {% if (isNotJavaLang(fk.parametrizedType)) %}
            import {{replace(fk.parametrizedType.name, '$', '.')}}
        {% endif %}
        {% for fkPath in fk.getPaths().keySet() %}
            {% if (isNotJavaLang(fkPath.config.computedFieldType)) %}
                import {{fkPath.config.computedFieldType.name}}
            {% endif %}
        {% endfor %}
{% endfor %}
import javax.annotation.Generated
import java.util.ArrayList
import java.util.Arrays

/**
 *
 * This class was generated by EntityQL (https://github.com/eXsio/querydsl-entityql).
 * It is not recommended to make any changes to this class.
 * Any manual changes will be lost upon the next class generation.
 *
 */
@Generated("{{exporterName}}")
class {{ className }} : QStaticModel<{{macros.printSimpleNameKt(entityClass)}}> {

    companion object {
     val instance: {{ className }} = {{ className }}()
     val  q{{entitySimpleName}}: {{ className }} = {{ className }}.instance
    }

    {% for entry in q.rawColumns %}
        {% set name = entry.key %}
        {% set path = entry.value %}
        lateinit var {{ name }}: {{macros.printColumnTypeKt(path)}}
    {% endfor %}

    {% for entry in q.rawJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        lateinit var {{ name }}: {{macros.printJoinColumnTypeKt(fk)}}
    {% endfor %}

    {% for entry in q.rawInverseJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        lateinit var {{ name }}: {{macros.printJoinColumnTypeKt(fk)}}
    {% endfor %}

    lateinit var _primaryKey:  PrimaryKey<{{macros.printSimpleNameKt(entityClass)}}>

    constructor(): this("{{ q.tableName }}")

    constructor(variable: String): super({{entitySimpleName}}::class.java, variable, "{{q.schemaName }}", "{{ q.tableName }}") {
        {% for entry in q.rawColumns %}
            {% set name = entry.key %}
            {% set path = entry.value %}
            //{{name}}
            run {
                val config = QPathConfig({{macros.printOriginalTypeKt(path)}},{{macros.printComputedTypeKt(path)}},"{{path.config.name}}",{{path.config.nullable}},{{path.config.idx}},{{path.config.sqlType}})
                this.{{name}} = QPathFactory.create<{{macros.printColumnTypeKt(path)}}>(this, config)
                addMetadata(this.{{name}}, QColumnMetadataFactory.create(config))
                this.columnsMap.put("{{name}}",this.{{name}})
            }
        {% endfor %}

        {% for entry in q.rawJoinColumns %}
            {% set name = entry.key %}
            {% set fk = entry.value %}
            {% if (fk.getPaths().size() > 1) %}
                //{{name}}
                run {

                    {% for fkPath in fk.getPaths().keySet() %}
                        val config{{loop.index}} = QPathConfig({{macros.printOriginalTypeKt(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}::class.java,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}})
                        val {{name}}{{loop.index}}  = QPathFactory.create<Path<*>>(this, config{{loop.index}})
                        addMetadata({{name}}{{loop.index}}, QColumnMetadataFactory.create(config{{loop.index}}))
                    {% endfor %}
                    this.{{name}} = this.createForeignKey<{{fk.parametrizedType.simpleName}}>(listOf(
                    {% for fkPath in fk.getPaths().keySet() %}
                        {{name}}{{loop.index}}
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ), listOf(
                     {% for fcName in fk.foreignColumnNames %}
                        "{{fcName}}"
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ))
                    this.joinColumnsMap.put("{{name}}",this.{{name}})
                }
            {% else %}
                //{{name}}
                run {
                    this.{{name}} = this.createForeignKey<{{macros.printSimpleNameKt(fk.parametrizedType)}}>(this.{{name}}Id, "{{fk.foreignColumnNames.first()}}")
                    this.joinColumnsMap.put("{{name}}",this.{{name}})
                }
            {% endif %}
        {% endfor %}

        {% for entry in q.rawInverseJoinColumns %}
            {% set name = entry.key %}
            {% set fk = entry.value %}
            //{{name}}
            run {

                {% for fkPath in fk.getPaths().keySet() %}
                    val config{{loop.index}} = QPathConfig({{macros.printOriginalTypeKt(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}::class.java,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}})
                    val {{name}}{{loop.index}}  = QPathFactory.create<Path<*>>(this, config{{loop.index}})
                    addMetadata({{name}}{{loop.index}}, QColumnMetadataFactory.create(config{{loop.index}}))
                {% endfor %}
                this.{{name}} = this.createInvForeignKey<{{fk.parametrizedType.simpleName}}>(listOf(
                {% for fkPath in fk.getPaths().keySet() %}
                    {{name}}{{loop.index}}
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ), listOf(
                 {% for fcName in fk.foreignColumnNames %}
                    "{{fcName}}"
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ))
                this.inverseJoinColumnsMap.put("{{name}}",this.{{name}})
            }
        {% endfor %}
        //_primaryKey
        run {
             val list = mutableListOf<Path<*>>(
             {% for idc in idCols %}
                  this.{{idc.fieldName}}
                  {% if not(loop.last) %},{% endif %}
             {% endfor %}
             )
             this.primaryKeyColumns = list
             this._primaryKey = this.createPrimaryKey(list.toTypedArray() as Path<*>)

        }
    }
}
