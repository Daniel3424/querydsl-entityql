{% import 'macrosKt.peb' as macros %}
package {{ package }}~nl~~nl~

import com.querydsl.sql.PrimaryKey~nl~
import pl.exsio.querydsl.entityql.QColumnMetadataFactory~nl~
import pl.exsio.querydsl.entityql.QPathConfig~nl~
import pl.exsio.querydsl.entityql.QPathFactory~nl~
import pl.exsio.querydsl.entityql.QStaticModel~nl~
{% if(q.rawJoinColumns.size() > 0 or q.rawInverseJoinColumns.size() > 0) %}
    import com.querydsl.sql.ForeignKey~nl~
{% endif %}
import {{entityName}}~nl~
{% for entry in q.rawColumns %}
    {% set name = entry.key %}
    {% set path = entry.value %}
    {% if (path.parametrized and isValidImport(path.parametrizedType, imports)) %}
        import {{replace(path.parametrizedType.name, '$', '.')}}~nl~
    {% endif %}
     {% if (isValidImport(path.get().class, imports)) %}
        import {{ path.get().class.name }}~nl~
     {% endif %}
     {% if (isValidImport(path.config.computedFieldType, imports)) %}
        import {{path.config.computedFieldType.name}}~nl~
    {% endif %}
{% endfor %}
{% for entry in q.rawJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        {% if (isValidImport(fk.parametrizedType, imports)) %}
            import {{replace(fk.parametrizedType.name, '$', '.' )}}~nl~
        {% endif %}
        {% for fkPath in fk.getPaths().keySet() %}
            {% if (isValidImport(fkPath.config.computedFieldType, imports)) %}
                import {{fkPath.config.computedFieldType.name}}~nl~
            {% endif %}
        {% endfor %}
{% endfor %}
{% for entry in q.rawInverseJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
        {% if (isValidImport(fk.parametrizedType, imports)) %}
            import {{replace(fk.parametrizedType.name, '$', '.')}}~nl~
        {% endif %}
        {% for fkPath in fk.getPaths().keySet() %}
            {% if (isValidImport(fkPath.config.computedFieldType, imports)) %}
                import {{fkPath.config.computedFieldType.name}}~nl~
            {% endif %}
        {% endfor %}
{% endfor %}
import javax.annotation.Generated~nl~
{% if (not(imports contains 'import com.querydsl.core.types.Path')) %}
import com.querydsl.core.types.Path~nl~
{% endif %}
~nl~~nl~
/**~nl~
 *~nl~
 * This class was generated by EntityQL (https://github.com/eXsio/querydsl-entityql).~nl~
 * It is not recommended to make any changes to this class.~nl~
 * Any manual changes will be lost upon the next class generation.~nl~
 *~nl~
 */~nl~
@Generated("{{exporterName}}")~nl~
class {{ className }} : QStaticModel<{{macros.printSimpleNameKt(entityClass)}}> {~nl~~nl~

~~~~companion object {~nl~
~~~~~~~~val instance: {{ className }} = {{ className }}()~nl~
~~~~~~~~val  q{{entitySimpleName}}: {{ className }} = {{ className }}.instance~nl~
~~~~}~nl~~nl~

    {% for entry in q.rawColumns %}
        {% set name = entry.key %}
        {% set path = entry.value %}
~~~~val {{ name }}: {{macros.printColumnTypeKt(path)}} = run {~nl~
~~~~~~~~val config = QPathConfig({{macros.printOriginalTypeKt(path)}},{{macros.printComputedTypeKt(path)}},"{{path.config.name}}",{{path.config.nullable}},{{path.config.idx}},{{path.config.sqlType}})~nl~
~~~~~~~~val {{name}} = QPathFactory.create<{{macros.printColumnTypeKt(path)}}>(this, config)~nl~
~~~~~~~~addMetadata({{name}}, QColumnMetadataFactory.create(config))~nl~
~~~~~~~~this.columnsMap.put("{{name}}",{{name}})~nl~
~~~~~~~~{{name}}~nl~
~~~~}~nl~~nl~
    {% endfor %}

    {% for entry in q.rawJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
~~~~val {{ name }}: {{macros.printJoinColumnTypeKt(fk)}} =
        {% if (fk.getPaths().size() > 1) %}
            run {~nl~
                    {% for fkPath in fk.getPaths().keySet() %}
~~~~~~~~val config{{loop.index}} = QPathConfig({{macros.printOriginalTypeKt(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}::class.java,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}})~nl~
~~~~~~~~val {{name}}{{loop.index}}  = QPathFactory.create<Path<*>>(this, config{{loop.index}})~nl~
~~~~~~~~addMetadata({{name}}{{loop.index}}, QColumnMetadataFactory.create(config{{loop.index}}))~nl~
                    {% endfor %}
~~~~~~~~val {{name}} = this.createForeignKey<{{fk.parametrizedType.simpleName}}>(listOf(
                    {% for fkPath in fk.getPaths().keySet() %}
                        {{name}}{{loop.index}}
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ), listOf(
                     {% for fcName in fk.foreignColumnNames %}
                        "{{fcName}}"
                        {% if (loop.last) %}{% else %}
                            ,
                        {% endif %}
                    {% endfor %}
                    ))~nl~
~~~~~~~~this.joinColumnsMap.put("{{name}}",{{name}})~nl~
~~~~~~~~{{name}}~nl~
~~~~}~nl~~nl~
            {% else %}
                run {~nl~
~~~~~~~~val {{name}} = this.createForeignKey<{{macros.printSimpleNameKt(fk.parametrizedType)}}>(this.{{name}}Id, "{{fk.foreignColumnNames.first()}}")~nl~
~~~~~~~~this.joinColumnsMap.put("{{name}}",{{name}})~nl~
~~~~~~~~{{name}}~nl~
~~~~}~nl~~nl~
            {% endif %}
    {% endfor %}

    {% for entry in q.rawInverseJoinColumns %}
        {% set name = entry.key %}
        {% set fk = entry.value %}
~~~~val {{ name }}: {{macros.printJoinColumnTypeKt(fk)}} = run {~nl~
                {% for fkPath in fk.getPaths().keySet() %}
~~~~~~~~val config{{loop.index}} = QPathConfig({{macros.printOriginalTypeKt(fkPath)}},{{fkPath.config.computedFieldType.simpleName}}::class.java,"{{fkPath.config.name}}",{{fkPath.config.nullable}},{{fkPath.config.idx}},{{fkPath.config.sqlType}})~nl~
~~~~~~~~val {{name}}{{loop.index}}  = QPathFactory.create<Path<*>>(this, config{{loop.index}})~nl~
~~~~~~~~addMetadata({{name}}{{loop.index}}, QColumnMetadataFactory.create(config{{loop.index}}))~nl~
                {% endfor %}
~~~~~~~~val {{name}} = this.createInvForeignKey<{{fk.parametrizedType.simpleName}}>(listOf(
                {% for fkPath in fk.getPaths().keySet() %}
                    {{name}}{{loop.index}}
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ), listOf(
                 {% for fcName in fk.foreignColumnNames %}
                    "{{fcName}}"
                    {% if (loop.last) %}{% else %}
                        ,
                    {% endif %}
                {% endfor %}
                ))~nl~
~~~~~~~~this.inverseJoinColumnsMap.put("{{name}}",{{name}})~nl~
~~~~~~~~{{name}}~nl~
~~~~ }~nl~~nl~
    {% endfor %}

~~~~val _primaryKey:  PrimaryKey<{{macros.printSimpleNameKt(entityClass)}}> = run {~nl~
~~~~~~~~val list = mutableListOf<Path<*>>(
             {% for idc in idCols %}
                  this.{{idc.fieldName}}
                  {% if not(loop.last) %},{% endif %}
             {% endfor %}
             )~nl~
~~~~~~~~this.primaryKeyColumns = list~nl~
~~~~~~~~this.createPrimaryKey(*list.toTypedArray())~nl~
~~~~}~nl~~nl~

~~~~constructor(): this("{{ q.tableName }}")~nl~~nl~

~~~~constructor(variable: String): super({{entitySimpleName}}::class.java, variable, "{{q.schemaName }}", "{{ q.tableName }}")~nl~
}
